@page "/playernames"
@using BowlingTrackerSupreme.Domain.Models
@using BowlingTrackerSupreme.Infrastructure.Database
@using Microsoft.EntityFrameworkCore
@inject BowlingTrackerSupremeDbContext DbContext
@attribute [StreamRendering]

<PageTitle>Player names</PageTitle>

<div class="d-flex justify-content-between">
	<h3>Player names</h3>
	<a href="playername" class="btn btn-info" style="min-width: 100px;">New</a>
</div>

@if (_playerNicknames == null) { <em>Loading...</em> }
else
{
	<table class="table table-striped table-hover table-responsive">
		<caption>List of players: @_playerNicknames.Count()</caption>
		<thead> 
			<tr>
				<th scope="col" class="w-100">Name</th>
				<th scope="col">Player</th>
				<th scope="col" class="text-end text-nowrap">Created On</th>
				<th scope="col" class="text-end text-nowrap">Modified On</th>
			</tr>
		</thead>
		<tbody>
			@if (!_playerNicknames.Any())
			{
				<tr>
					<td colspan="4"><em>No player nicknames found.</em></td>
                </tr>
			}
			@foreach(var nickname in _playerNicknames)
			{
				<tr >
					<td class="w-100"><a href="playername/@nickname.Id">@nickname.Nickname</a></td>
					<td class=""><a href="player/@nickname.PlayerId">@nickname.Player.UserName</a></td>
					<td class="text-end text-nowrap">@nickname.CreatedOn</td>
					<td class="text-end text-nowrap">@nickname.ModifiedOn</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	protected IEnumerable<Domain.Models.PlayerNickname> _playerNicknames;

	protected override async Task OnInitializedAsync()
	{
        _playerNicknames = await DbContext.PlayerNicknameSet
            .Include(p => p.Player) // Include the Player navigation property
            .OrderByDescending(p => p.CreatedOn)
            .ToListAsync();
	}
}
