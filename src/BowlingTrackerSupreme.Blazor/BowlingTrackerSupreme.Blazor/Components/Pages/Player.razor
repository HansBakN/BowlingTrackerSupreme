@page "/player/{Id}"
@using BowlingTrackerSupreme.Infrastructure.Database;
@using Microsoft.EntityFrameworkCore
@inject BowlingTrackerSupremeDbContext DbContext;
@inject NavigationManager NavigationManager;
@attribute [StreamRendering]

<PageTitle>Player</PageTitle>
@if (_player == null)
{
	<h1><em>Loading...</em></h1>
}
else
{
	<h1>@_player.UserName</h1>

	<div class="d-flex mt-4 w-100">
		<div class="w-50 p-2">
			<h3>Nicknames</h3>
			<table class="table table-striped table-hover table-responsive">
				<caption>Nicknames: @(_nicknames?.Count() ?? 0)</caption>
				<thead>
					<tr>
						<th scope="col">Nickname</th>
						<th scope="col">Created On</th>
					</tr>
				</thead>
				<tbody>
					@if (_nicknames == null || !_nicknames.Any())
					{
						<tr>
							<td colspan="2"><em>No nicknames found.</em></td>
						</tr>
					}
					else
					{
						@foreach (var nickname in _nicknames)
						{
							<tr>
								<td>@nickname.Nickname</td>
								<td>@nickname.CreatedOn</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
		<div class="w-50 p-2">
			<h3>Games</h3>
			<table class="table table-striped table-hover table-responsive">
				<caption>Games: @(_games?.Count() ?? 0)</caption>
				<thead>
					<tr>
						<th scope="col">Played On</th>
						<th scope="col">Lane</th>
						<th scope="col">Game</th>
						<th scope="col">Created On</th>
						<th scope="col">Modified On</th>
                    </tr>
				</thead>
				<tbody>
					@if (_games == null || !_games.Any())
					{
						<tr>
							<td colspan="5"><em>No games found.</em></td>
						</tr>
					}
					else
					{
						@foreach (var game in _games)
						{
							<tr>
                                <td>@game.PlayedOn</td>
								<td>@game.Lane</td>
                                <td>@game.GameNumber</td>
								<td>@game.CreatedOn</td>
								<td>@game.ModifiedOn</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
	</div>
}

@code {
	[Parameter]
	public string Id { get; set; }

	private Domain.Models.Player _player;

	private IEnumerable<Domain.Models.Game> _games;

	private IEnumerable<Domain.Models.PlayerNickname> _nicknames;

	protected override async Task OnInitializedAsync()
	{
		if (!Guid.TryParse(Id, out var id))
		{
			NavigationManager.NavigateTo("/error");
		}

		_player = await DbContext.PlayerSet.FindAsync(id);
		if (_player == null)
		{
			NavigationManager.NavigateTo("/error");
		}

		_nicknames = DbContext.PlayerNicknameSet
			.Where(n => n.PlayerId == _player.Id)
			.OrderByDescending(n => n.CreatedOn);

		_games = DbContext.GamePlayerSet
			.Include(gp => gp.Game)
			.Where(gp => gp.PlayerId == _player.Id)
			.Select(gp => gp.Game)
			.OrderByDescending(g => g.CreatedOn)
			.Distinct();
	}
}
