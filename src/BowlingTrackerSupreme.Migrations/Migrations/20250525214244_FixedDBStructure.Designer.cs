// <auto-generated />
using System;
using BowlingTrackerSupreme.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BowlingTrackerSupreme.Migrations.Migrations
{
    [DbContext(typeof(BowlingTrackerSupremeDbContext))]
    [Migration("20250525214244_FixedDBStructure")]
    partial class FixedDBStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.Frame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccumulatedScore")
                        .HasColumnType("integer");

                    b.Property<int>("FirstRoll")
                        .HasColumnType("integer");

                    b.Property<Guid>("GamePlayerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("SecondRoll")
                        .HasColumnType("integer");

                    b.Property<int>("ThirdRoll")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GamePlayerId");

                    b.ToTable("FrameSet");
                });

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedOn")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("GameNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Lane")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("PlayedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("GameSet");
                });

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.GamePlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlayerNicknameId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerNicknameId");

                    b.ToTable("GamePlayerSet");
                });

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PlayerSet");
                });

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.PlayerNickname", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerNicknameSet");
                });

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.Frame", b =>
                {
                    b.HasOne("BowlingTrackerSupreme.Domain.Models.GamePlayer", "GamePlayer")
                        .WithMany("Frames")
                        .HasForeignKey("GamePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GamePlayer");
                });

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.GamePlayer", b =>
                {
                    b.HasOne("BowlingTrackerSupreme.Domain.Models.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BowlingTrackerSupreme.Domain.Models.Player", "Player")
                        .WithMany("GameParticipations")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BowlingTrackerSupreme.Domain.Models.PlayerNickname", "PlayerNickname")
                        .WithMany("GamePlayers")
                        .HasForeignKey("PlayerNicknameId");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("PlayerNickname");
                });

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.PlayerNickname", b =>
                {
                    b.HasOne("BowlingTrackerSupreme.Domain.Models.Player", "Player")
                        .WithMany("Nicknames")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.Game", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.GamePlayer", b =>
                {
                    b.Navigation("Frames");
                });

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.Player", b =>
                {
                    b.Navigation("GameParticipations");

                    b.Navigation("Nicknames");
                });

            modelBuilder.Entity("BowlingTrackerSupreme.Domain.Models.PlayerNickname", b =>
                {
                    b.Navigation("GamePlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
